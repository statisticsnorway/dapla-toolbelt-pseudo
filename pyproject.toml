[tool.poetry]
name = "dapla-toolbelt-pseudo"
version = "2.1.1"
description = "Pseudonymization extensions for Dapla"
authors = ["Dapla Developers <dapla-platform-developers@ssb.no>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/statisticsnorway/dapla-toolbelt-pseudo"
repository = "https://github.com/statisticsnorway/dapla-toolbelt-pseudo"
documentation = "https://statisticsnorway.github.io/dapla-toolbelt-pseudo"
packages = [{ include = "dapla_pseudo", from = "src" }]
classifiers = ["Development Status :: 4 - Beta"]

[tool.poetry.urls]
Changelog = "https://github.com/statisticsnorway/dapla-toolbelt-pseudo/releases"

[tool.poetry.dependencies]
python = ">=3.10, <3.13" # This needs to be pinned in sync with SciPy.
pydantic = ">=2.0"
numpy = "^1.26.4"   # A lot of packages don't use numpy 2.0 yet, so constraint is tight.
                    # this constraint should be loosened after a while.
pyhumps = ">=3.8.0"
types-requests = ">=2.28.11"
pandas-stubs = ">=1.5.3.230304"
puremagic = ">=1.15"
python-ulid = ">=2.2.0"
cryptography = ">41.0.0"
dapla-toolbelt = ">=1.7.0"
fsspec = ">=2023.5.0"
polars = ">=0.18.2"
pygments = ">2.15.0"
click = ">=8.0.1"
ssb-datadoc-model = ">=5.0.0"
cloudpathlib = { extras = ["gs"], version = ">=0.17.0" }
pyarrow = ">=14.0.2, <15"
orjson = "^3.10.1"
wcmatch = "^8.5.1"
msgspec = ">=0.18.6"

[tool.poetry.group.test.dependencies]
typeguard = ">=2.13.3"

[tool.poetry.group.dev.dependencies]
pytest-cases = ">=3.8.5"
pytest-mock = ">=3.14"
pygments = ">=2.10.0"
black = { extras = ["jupyter"], version = ">=23.1.0" }
coverage = { extras = ["toml"], version = ">=6.2" }
darglint = ">=1.8.1"
furo = ">=2021.11.12"
mypy = ">=0.930"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
ruff = ">=0.3.1"
pytest = ">=6.2.5"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
ipykernel = ">=6.0.0"
mock = ">=4.0.3"
pandas-stubs = ">=1.5.3.230304"
nbstripout = ">=0.6.1"
ipython = ">=8.11.0"
jupyterlab = ">=4.0.0"
google-auth = ">= 2.25.2"


[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["dapla_pseudo", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
# Allow missing type hints in third-party libraries without type information.
module = [
    'google.auth.exceptions',
    'gcsfs',
    'gcsfs.core',
    'dapla',
    'fsspec',
    'fsspec.spec',
    'typeguard',
    'puremagic',
    'google.*',
    'google.oauth2',
    'pytest_cases',
    'pytest_mock'
]
ignore_missing_imports = true
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "dapla_pseudo.tests.*"
disallow_untyped_defs = true


[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py310"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle
    "F",    # pyflakes
    "ISC",  # implicit string concatenation
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
ignore = [
    "ANN101", # Supress missing-type-self.
    "ANN102", # Supress missing-type-cls.
    "ANN202", # Don't require return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/**" = [
    # asserts are encouraged in pytest
    "S101",
    # return annotations don't add value for test functions
    "ANN201",
    # docstrings are overkill for test functions
    "D100",
    "D101",
    "D102",
    "D103",
]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
