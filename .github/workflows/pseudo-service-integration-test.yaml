name: Pseudo service

env:
  PSEUDO_SERVICE_URL: "https://dapla-pseudo-service.staging-bip-app.ssb.no"

on:
  push:
    branches:
      - integration-test

permissions:
  contents: "read"
  id-token: "write"

jobs:
  integration_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v1.1.1"
      with:
        workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.INTEGRATION_TEST_SA_EMAIL }}
        token_format: "access_token"
    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      with:
        version: '>= 363.0.0'
    - name: Generate, mask, and output Google ID token as a secret
      id: get-id-token
      run: |
        pseudo_service_auth_token="$(gcloud auth print-identity-token)"
        echo "::add-mask::$pseudo_service_auth_token"
        echo "PSEUDO_SERVICE_AUTH_TOKEN=$pseudo_service_auth_token" >> "$GITHUB_OUTPUT"
    - name: Setup python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
      run: pip install .
    - name: Test toolbelt pseudo
      env:
        PSEUDO_SERVICE_AUTH_TOKEN: ${{ steps.get-id-token.outputs.PSEUDO_SERVICE_AUTH_TOKEN }}
      run: |
        import pandas as pd
        from dapla_pseudo import Pseudonymize

        JSON_FILE = "tests/data/personer_pseudonymized.json"

        df = pd.read_json(
            JSON_FILE,
            dtype={
                "fnr": "string",
                "fornavn": "string",
                "etternavn": "string",
                "kjonn": "category",
                "fodselsdato": "string",
            },
        )

        result = (
            Pseudonymize                   ### GENERAL WORKFLOW ###
            .from_pandas(df)             # Select dataset
            .on_fields("fnr")            # Select fields in dataset
            .with_default_encryption()   # Select encryption method on fields
            .run()                       # Apply pseudonymization
        )
        result.to_polars().head()        # Convert result to Polars DataFrame
      shell: python
