#!/bin/bash

# fail as soon as any command errors
set -euxo pipefail

token=$1
update_command=$2
default_branch_name=$3
update_path=$4
on_changes_command=$5
repo=$GITHUB_REPOSITORY #owner and repository: ie: user/repo
username=$GITHUB_ACTOR

branch_name="automated-dependencies-update"
email="noreply@github.com"
remote_name="authenticated"
pr_title=":arrow_up: Update dependencies"

if [ -z "$token" ]; then
    echo "token is not defined"
    exit 1
fi

if [ -z "$update_command" ]; then
    echo "update-command cannot be empty"
    exit 1
fi

# remove optional params markers
update_path_value=${update_path%?}
if [ -n "$update_path_value" ]; then
    # if path is set, use that. otherwise default to current working directory
    echo "Change directory to $update_path_value"
    cd "$update_path_value"
fi

# assumes the repo is already cloned as a prerequisite for running the script

# fetch first to be able to detect if branch already exists
git fetch


# branch already exists, previous opened PR was not merged
if [ -z "$(git branch --list $branch_name)" ]; then
    # create new branch
    git checkout -b $branch_name
else
    echo "Branch name $branch_name already exists"

    # check out existing branch
    echo "Check out branch instead"
    git checkout $branch_name
    git pull
fi

echo "Running update command $update_command"
eval "$update_command"

if git --no-pager diff | grep diff; then
    echo "Updates detected"

    if [[ -z ${NO_GIT_CONFIG_CHANGE+x} ]]; then
        # configure git authorship
        git config --global user.email $email
        git config --global user.name "$username"
    else
        echo "NO_GIT_CONFIG_CHANGE was set, not modifying .gitconfig"
    fi

    # Only add the remote if it doesn't already exist
    if [[ $(git remote) == *$remote_name* ]]; then
        echo "Remote already exists, skipping adding it."
    else
        echo "Adding remote $remote_name"
        # format: https://[username]:[token]@github.com/[organization]/[repo].git
        git remote add "$remote_name" "https://$username:$token@github.com/$repo.git"
    fi

    # execute command to run when changes are deteced, if provided
    on_changes_command_value=${on_changes_command%?}
    echo "$on_changes_command_value"
    if [ -n "$on_changes_command_value" ]; then
        echo "Run post-update command"
        eval "$on_changes_command_value"
    fi

    # explicitly add all files including untracked
    git add -A

    # commit the changes
    git commit -a -m "$pr_title" --signoff

    # push the changes
    git push "$remote_name" -f -u

    echo "https://api.github.com/repos/$repo/pulls"

    # create the PR
    # if PR already exists, then update
    response=$(curl --write-out "%{message}\n" -X POST -H "Content-Type: application/json" -H "Authorization: token $token" \
         --data '{"title":"'"$pr_title"'","head": "'"$branch_name"'","base":"'"$default_branch_name"'", "body":"Auto-generated pull request. \nThis pull request is generated by GitHub action based on the provided update commands."}' \
         "https://api.github.com/repos/$repo/pulls")

    echo "$response"

    if [[ "$response" == *"already exist"* ]]; then
        echo "Pull request already opened. Updates were pushed to the existing PR instead"
        exit 0
    fi
else
    echo "No dependencies updates were detected"
    exit 0
fi
